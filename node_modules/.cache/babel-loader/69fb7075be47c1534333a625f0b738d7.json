{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport setAuthToken from './utils/setAuthToken';\nconst initialState = {};\nconst middleware = [thunk];\nconst store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nlet currentState = store.getState();\nstore.subscribe(() => {\n  let previousState = currentState;\n  currentState = store.getState();\n\n  if (previousState && currentState && previousState.auth && currentState.auth && previousState.auth.token && currentState.auth.token) {\n    if (previousState.auth.token !== currentState.auth.token) {\n      const token = currentState.auth.token;\n      setAuthToken(token);\n    }\n  }\n});\nexport default store;","map":{"version":3,"sources":["/home/hestabit/Music/moonick/src/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","thunk","rootReducer","setAuthToken","initialState","middleware","store","currentState","getState","subscribe","previousState","auth","token"],"mappings":"AAAA,SAASA,WAAT,EAAqBC,eAArB,QAA4C,OAA5C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,YAAxB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,MAAMC,UAAU,GAAG,CAACJ,KAAD,CAAnB;AAEA,MAAMK,KAAK,GAAGR,WAAW,CACrBI,WADqB,EAErBE,YAFqB,EAGrBJ,mBAAmB,CAACD,eAAe,CAAC,GAAGM,UAAJ,CAAhB,CAHE,CAAzB;AAMA,IAAIE,YAAY,GAAGD,KAAK,CAACE,QAAN,EAAnB;AAEAF,KAAK,CAACG,SAAN,CAAgB,MAAM;AAClB,MAAIC,aAAa,GAAGH,YAApB;AACAA,EAAAA,YAAY,GAAGD,KAAK,CAACE,QAAN,EAAf;;AACA,MAAGE,aAAa,IAAIH,YAAjB,IAAiCG,aAAa,CAACC,IAA/C,IAAuDJ,YAAY,CAACI,IAApE,IAA4ED,aAAa,CAACC,IAAd,CAAmBC,KAA/F,IAAwGL,YAAY,CAACI,IAAb,CAAkBC,KAA7H,EAAoI;AAChI,QAAIF,aAAa,CAACC,IAAd,CAAmBC,KAAnB,KAA6BL,YAAY,CAACI,IAAb,CAAkBC,KAAnD,EAA2D;AACvD,YAAMA,KAAK,GAAGL,YAAY,CAACI,IAAb,CAAkBC,KAAhC;AACAT,MAAAA,YAAY,CAACS,KAAD,CAAZ;AACH;AACJ;AACJ,CATD;AAWA,eAAeN,KAAf","sourcesContent":["import { createStore,applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport setAuthToken from './utils/setAuthToken';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(...middleware))\n);\n\nlet currentState = store.getState();\n\nstore.subscribe(() => {\n    let previousState = currentState;\n    currentState = store.getState();\n    if(previousState && currentState && previousState.auth && currentState.auth && previousState.auth.token && currentState.auth.token) {\n        if( previousState.auth.token !== currentState.auth.token ) {\n            const token = currentState.auth.token;\n            setAuthToken(token);\n        }\n    }\n})\n\nexport default store;"]},"metadata":{},"sourceType":"module"}