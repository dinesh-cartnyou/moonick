{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { isNotEmptyObject } from './index';\n\nfunction UseHeaderchange(newPath, newHeaderType, ...rest) {\n  _s();\n\n  if (!window['newMemory']) {\n    window['newMemory'] = {};\n    const event = new Event('changeGrid');\n    console.log('new memory', window['newMemory']);\n  }\n\n  const {\n    newMemory\n  } = window;\n  const [filters, setFilters] = useState({});\n  const initialState = {\n    path: newPath,\n    headerType: newHeaderType || 'home',\n    ...rest\n  };\n\n  if (!isNotEmptyObject(filters)) {\n    setFilters({ ...initialState\n    });\n  }\n\n  if (!newMemory[newPath]) newMemory[newPath] = { ...initialState\n  };\n  let handleMemoryChange = useCallback(() => {\n    console.log(handleMemory);\n    const {\n      path,\n      headerType\n    } = filters;\n\n    if (!newMemory[newPath]) {\n      newMemory[newPath] = { ...initialState\n      }; // setFilters({\n      //     ...filters,\n      //     path: newPath,\n      //     headerType: newHeaderType || 'home'\n      // })\n      // setFilters({ ...initialState });\n\n      console.log(newMemory, initialState, 'state');\n    } else {\n      console.log(newMemory, 'state', '1');\n      return { ...newMemory[newPath]\n      };\n    }\n  }, []);\n  useEffect(() => {\n    window.addEventListener('changeGrid', handleMemoryChange);\n    return window.removeEventListener('changeGrid', handleMemoryChange);\n  }, [handleMemoryChange]);\n  console.log(newMemory, 'state', '2');\n  return { ...newMemory[newPath]\n  };\n}\n\n_s(UseHeaderchange, \"An1g4kfC8XbKtJDtYS2/NPWOa9Y=\");\n\n_c = UseHeaderchange;\nUseHeaderchange.propTypes = {\n  newPath: PropTypes.string,\n  headerType: PropTypes.string\n};\nexport default UseHeaderchange; // function UseHeaderchange(newPath, headerData) {\n//     if (!window['newMemory']) {\n//         window['newMemory'] = {};\n//         const event =  new Event('changeOccur');\n//         console.log('new memory', window['newMemory']);\n//     }\n//     const { newMemory } = window;\n//     const [filters, setFilters] = useState({});\n//     const { newHeaderType,headerValue } = headerData; \n//     if(!isNotEmptyObject(newMemory) && newPath && headerData) {\n//         const initialState = {\n//              path: newPath,\n//              headerData\n//         };\n//         newMemory[newPath] = { ...initialState }\n//         return setFilters({ ...initialState });\n//     }    \n//     if (isNotEmptyObject(newMemory) && !newMemory[newPath]) newMemory[newPath] = { ...initialState };\n//     else{\n//     } \n//     let handleMemoryChange = useCallback(() => {\n//         const { path, headerData } = filters;\n//         if (!newMemory[newPath]) {\n//             newMemory[newPath] = { ...initialState };\n//             setFilters({\n//                 ...filters,\n//                 path: newPath,\n//                 headerType: newHeaderType || 'home'\n//             })\n//             setFilters({ ...initialState });\n//             console.log(newMemory, initialState, 'state');\n//         } else {\n//             console.log(newMemory, 'state', '1');\n//             return { ...newMemory[newPath] };\n//         }\n//     }, [])\n//     useEffect(() => {\n//         window.addEventListener('changeOccur', handleMemoryChange)\n//         return window.removeEventListener('changeOccur', handleMemoryChange)\n//     }, [handleMemoryChange])\n//     console.log(newMemory, 'state', '2');\n//     return { ...newMemory[newPath] };\n// }\n// UseHeaderchange.propTypes = {\n//     newPath: PropTypes.string,\n//     headerType: PropTypes.string\n// }\n// export default UseHeaderchange;\n// import React, { useState, useEffect, useCallback } from 'react';\n// import PropTypes from 'prop-types';\n// function UseHeaderchange(newPath, newHeaderType, ...rest) {\n//     if (!window['newMemory']) {\n//         window['newMemory'] = {};\n//         console.log('new memory', window['newMemory']);\n//     }\n//     const { newMemory } = window;\n//     const initialState = {\n//         path: '',\n//         headerType: 'home',\n//         ...rest\n//     };\n//     if (!newMemory[newPath]) newMemory[newPath] = { path: newPath, headerType: newHeaderType || 'home', ...rest };\n//     // console.log(newMemory, initialState, 'state');\n//     // const [filters, setFilters] = useState({ ...initialState });\n//     // let handleMemoryChange = useCallback(() => {\n//     //     const { path, headerType } = filters;\n//     //     if (!newMemory[newPath]) {\n//     //         setFilters({\n//     //             ...filters,\n//     //             path: newPath,\n//     //             headerType: newHeaderType || 'home'\n//     //         })\n//     //         console.log('Hey hi');\n//     //     } else {\n//     //         console.log(newMemory, filters, 'state', '1');\n//     //         return newMemory[newPath];\n//     //     }\n//     // }, [filters])\n//     // useEffect(() => {\n//     //     window.addEventListener('memoryChange', handleMemoryChange)\n//     //     window.removeEventListener('memoryChange', handleMemoryChange)\n//     // }, [filters])\n//     console.log(newMemory, 'state', '2');\n//     return newMemory[newPath];\n// }\n// UseHeaderchange.propTypes = {\n//     newPath: PropTypes.string,\n//     headerType: PropTypes.string\n// }\n// export default UseHeaderchange;\n\nvar _c;\n\n$RefreshReg$(_c, \"UseHeaderchange\");","map":{"version":3,"sources":["/home/hestabit/Music/moonick/src/utils/global-functions/use-Header-change.js"],"names":["React","useState","useEffect","useCallback","PropTypes","isNotEmptyObject","UseHeaderchange","newPath","newHeaderType","rest","window","event","Event","console","log","newMemory","filters","setFilters","initialState","path","headerType","handleMemoryChange","handleMemory","addEventListener","removeEventListener","propTypes","string"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { isNotEmptyObject } from './index';\n\nfunction UseHeaderchange(newPath, newHeaderType, ...rest) {\n    if (!window['newMemory']) {\n        window['newMemory'] = {};\n        const event = new Event('changeGrid');\n        console.log('new memory', window['newMemory']);\n    }\n\n    const { newMemory } = window;\n\n    const [filters, setFilters] = useState({});\n\n    const initialState = {\n        path: newPath,\n        headerType: newHeaderType || 'home',\n        ...rest\n    };\n\n    if(!isNotEmptyObject(filters)) {\n        setFilters({ ...initialState });\n    }    \n\n    if (!newMemory[newPath]) newMemory[newPath] = { ...initialState };\n\n    let handleMemoryChange = useCallback(() => {\n        console.log(handleMemory)\n        const { path, headerType } = filters;\n        if (!newMemory[newPath]) {\n            newMemory[newPath] = { ...initialState };\n            // setFilters({\n            //     ...filters,\n            //     path: newPath,\n            //     headerType: newHeaderType || 'home'\n            // })\n            // setFilters({ ...initialState });\n            console.log(newMemory, initialState, 'state');\n        } else {\n            console.log(newMemory, 'state', '1');\n            return { ...newMemory[newPath] };\n        }\n    }, [])\n\n    useEffect(() => {\n        window.addEventListener('changeGrid', handleMemoryChange)\n        return window.removeEventListener('changeGrid', handleMemoryChange)\n    }, [handleMemoryChange])\n    console.log(newMemory, 'state', '2');\n    return { ...newMemory[newPath] };\n}\n\nUseHeaderchange.propTypes = {\n    newPath: PropTypes.string,\n    headerType: PropTypes.string\n}\n\nexport default UseHeaderchange;\n\n\n// function UseHeaderchange(newPath, headerData) {\n//     if (!window['newMemory']) {\n//         window['newMemory'] = {};\n//         const event =  new Event('changeOccur');\n//         console.log('new memory', window['newMemory']);\n//     }\n\n//     const { newMemory } = window;\n\n//     const [filters, setFilters] = useState({});\n\n//     const { newHeaderType,headerValue } = headerData; \n\n//     if(!isNotEmptyObject(newMemory) && newPath && headerData) {\n//         const initialState = {\n//              path: newPath,\n//              headerData\n//         };\n//         newMemory[newPath] = { ...initialState }\n//         return setFilters({ ...initialState });\n//     }    \n\n//     if (isNotEmptyObject(newMemory) && !newMemory[newPath]) newMemory[newPath] = { ...initialState };\n//     else{\n          \n//     } \n\n//     let handleMemoryChange = useCallback(() => {\n//         const { path, headerData } = filters;\n//         if (!newMemory[newPath]) {\n//             newMemory[newPath] = { ...initialState };\n//             setFilters({\n//                 ...filters,\n//                 path: newPath,\n//                 headerType: newHeaderType || 'home'\n//             })\n//             setFilters({ ...initialState });\n//             console.log(newMemory, initialState, 'state');\n//         } else {\n//             console.log(newMemory, 'state', '1');\n//             return { ...newMemory[newPath] };\n//         }\n//     }, [])\n\n//     useEffect(() => {\n//         window.addEventListener('changeOccur', handleMemoryChange)\n//         return window.removeEventListener('changeOccur', handleMemoryChange)\n//     }, [handleMemoryChange])\n//     console.log(newMemory, 'state', '2');\n//     return { ...newMemory[newPath] };\n// }\n\n// UseHeaderchange.propTypes = {\n//     newPath: PropTypes.string,\n//     headerType: PropTypes.string\n// }\n\n// export default UseHeaderchange;\n\n\n// import React, { useState, useEffect, useCallback } from 'react';\n// import PropTypes from 'prop-types';\n\n// function UseHeaderchange(newPath, newHeaderType, ...rest) {\n//     if (!window['newMemory']) {\n//         window['newMemory'] = {};\n//         console.log('new memory', window['newMemory']);\n//     }\n//     const { newMemory } = window;\n\n//     const initialState = {\n//         path: '',\n//         headerType: 'home',\n//         ...rest\n//     };\n//     if (!newMemory[newPath]) newMemory[newPath] = { path: newPath, headerType: newHeaderType || 'home', ...rest };\n//     // console.log(newMemory, initialState, 'state');\n//     // const [filters, setFilters] = useState({ ...initialState });\n\n//     // let handleMemoryChange = useCallback(() => {\n//     //     const { path, headerType } = filters;\n//     //     if (!newMemory[newPath]) {\n//     //         setFilters({\n//     //             ...filters,\n//     //             path: newPath,\n//     //             headerType: newHeaderType || 'home'\n//     //         })\n//     //         console.log('Hey hi');\n//     //     } else {\n//     //         console.log(newMemory, filters, 'state', '1');\n//     //         return newMemory[newPath];\n//     //     }\n//     // }, [filters])\n\n//     // useEffect(() => {\n//     //     window.addEventListener('memoryChange', handleMemoryChange)\n//     //     window.removeEventListener('memoryChange', handleMemoryChange)\n//     // }, [filters])\n//     console.log(newMemory, 'state', '2');\n//     return newMemory[newPath];\n// }\n\n// UseHeaderchange.propTypes = {\n//     newPath: PropTypes.string,\n//     headerType: PropTypes.string\n// }\n\n// export default UseHeaderchange;"]},"metadata":{},"sourceType":"module"}