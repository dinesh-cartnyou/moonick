{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction UseHeaderchange(newPath, newHeaderType, ...rest) {\n  _s();\n\n  if (!window['newMemory']) {\n    window['newMemory'] = {};\n  }\n\n  const {\n    newMemory\n  } = window;\n  const initialState = {\n    path: '',\n    headerType: 'home',\n    ...rest\n  };\n  if (!newMemory[newPath]) newMemory[newPath] = initialState;\n  const [filters, setFilters] = useState(initialState);\n  let handleMemoryChange = useCallback(() => {\n    const {\n      path,\n      headerType\n    } = filters;\n\n    if (!newMemory[newPath]) {\n      setFilters({ ...filters,\n        path: newPath,\n        headerType: newHeaderType || 'home'\n      });\n    } else {\n      return [filters, setFilters];\n    }\n  }, [filters]);\n  useEffect(() => {\n    window.addEventListener('memoryChange', handleMemoryChange);\n    window.removeEventListener('memoryChange', handleMemoryChange);\n  }, [filters]);\n  return [filters, setFilters];\n}\n\n_s(UseHeaderchange, \"yfA8RmNttYdez7LSR0IACBMdwU8=\");\n\n_c = UseHeaderchange;\nUseHeaderchange.propTypes = {\n  newPath: PropTypes.string,\n  headerType: PropTypes.string\n};\nexport default UseHeaderchange;\n\nvar _c;\n\n$RefreshReg$(_c, \"UseHeaderchange\");","map":{"version":3,"sources":["/home/hestabit/Music/moonick/src/utils/global-functions/use-Header-change.js"],"names":["React","useState","useEffect","useCallback","PropTypes","UseHeaderchange","newPath","newHeaderType","rest","window","newMemory","initialState","path","headerType","filters","setFilters","handleMemoryChange","addEventListener","removeEventListener","propTypes","string"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,SAASC,eAAT,CAAyBC,OAAzB,EAAkCC,aAAlC,EAAgD,GAAGC,IAAnD,EAAyD;AAAA;;AACrD,MAAI,CAACC,MAAM,CAAC,WAAD,CAAX,EAA0B;AACtBA,IAAAA,MAAM,CAAC,WAAD,CAAN,GAAsB,EAAtB;AACH;;AACD,QAAM;AAAEC,IAAAA;AAAF,MAAgBD,MAAtB;AAEA,QAAME,YAAY,GAAG;AACjBC,IAAAA,IAAI,EAAE,EADW;AAEjBC,IAAAA,UAAU,EAAE,MAFK;AAGjB,OAAGL;AAHc,GAArB;AAKA,MAAG,CAACE,SAAS,CAACJ,OAAD,CAAb,EAAwBI,SAAS,CAACJ,OAAD,CAAT,GAAqBK,YAArB;AAExB,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAACU,YAAD,CAAtC;AAEA,MAAIK,kBAAkB,GAAGb,WAAW,CAAC,MAAM;AACvC,UAAM;AAAES,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAuBC,OAA7B;;AACA,QAAI,CAACJ,SAAS,CAACJ,OAAD,CAAd,EAAyB;AACrBS,MAAAA,UAAU,CAAC,EACP,GAAGD,OADI;AAEPF,QAAAA,IAAI,EAAEN,OAFC;AAGPO,QAAAA,UAAU,EAAEN,aAAa,IAAI;AAHtB,OAAD,CAAV;AAKH,KAND,MAMO;AACH,aAAO,CAACO,OAAD,EAAUC,UAAV,CAAP;AACH;AACJ,GAXmC,EAWlC,CAACD,OAAD,CAXkC,CAApC;AAaAZ,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,MAAM,CAACQ,gBAAP,CAAwB,cAAxB,EAAwCD,kBAAxC;AACAP,IAAAA,MAAM,CAACS,mBAAP,CAA2B,cAA3B,EAA2CF,kBAA3C;AACH,GAHQ,EAGN,CAACF,OAAD,CAHM,CAAT;AAKA,SAAO,CAACA,OAAD,EAAUC,UAAV,CAAP;AACH;;GAlCQV,e;;KAAAA,e;AAoCTA,eAAe,CAACc,SAAhB,GAA4B;AACxBb,EAAAA,OAAO,EAAEF,SAAS,CAACgB,MADK;AAExBP,EAAAA,UAAU,EAAET,SAAS,CAACgB;AAFE,CAA5B;AAKA,eAAef,eAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction UseHeaderchange(newPath, newHeaderType,...rest) {\n    if (!window['newMemory']) {\n        window['newMemory'] = {};\n    }\n    const { newMemory } = window;\n\n    const initialState = {\n        path: '',\n        headerType: 'home',\n        ...rest\n    }\n    if(!newMemory[newPath]) newMemory[newPath] = initialState;\n\n    const [filters, setFilters] = useState(initialState);\n\n    let handleMemoryChange = useCallback(() => {\n        const { path, headerType } = filters;\n        if (!newMemory[newPath]) {\n            setFilters({\n                ...filters,\n                path: newPath,\n                headerType: newHeaderType || 'home'\n            })\n        } else {\n            return [filters, setFilters];\n        }\n    },[filters])\n\n    useEffect(() => {\n        window.addEventListener('memoryChange', handleMemoryChange )\n        window.removeEventListener('memoryChange', handleMemoryChange)\n    }, [filters])\n\n    return [filters, setFilters];\n}\n\nUseHeaderchange.propTypes = {\n    newPath: PropTypes.string,\n    headerType: PropTypes.string\n}\n\nexport default UseHeaderchange;"]},"metadata":{},"sourceType":"module"}