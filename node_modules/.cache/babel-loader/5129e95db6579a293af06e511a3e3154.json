{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction UseHeaderchange(newPath, newHeaderType, ...rest) {\n  _s();\n\n  if (!window['newMemory']) {\n    window['newMemory'] = {};\n    console.log('new memory', window['newMemory']);\n  }\n\n  const {\n    newMemory\n  } = window;\n  const initialState = {\n    path: '',\n    headerType: 'home',\n    ...rest\n  };\n  if (!newMemory[newPath]) newMemory[newPath] = initialState; // console.log(newMemory, initialState, 'state');\n\n  const [filters, setFilters] = useState({ ...initialState\n  });\n  let handleMemoryChange = useCallback(() => {\n    const {\n      path,\n      headerType\n    } = filters;\n\n    if (!newMemory[newPath]) {\n      setFilters({ ...filters,\n        path: newPath,\n        headerType: newHeaderType || 'home'\n      });\n    } else {\n      console.log(newMemory, filters, 'state');\n      return [filters, setFilters];\n    }\n  }, [filters]);\n  useEffect(() => {\n    window.addEventListener('memoryChange', handleMemoryChange);\n    window.removeEventListener('memoryChange', handleMemoryChange);\n  }, [filters]);\n  return [filters, setFilters];\n}\n\n_s(UseHeaderchange, \"hmVslmSJ3mTU0+AfiMESVIKEFjs=\");\n\n_c = UseHeaderchange;\nUseHeaderchange.propTypes = {\n  newPath: PropTypes.string,\n  headerType: PropTypes.string\n};\nexport default UseHeaderchange;\n\nvar _c;\n\n$RefreshReg$(_c, \"UseHeaderchange\");","map":{"version":3,"sources":["/home/hestabit/Music/moonick/src/utils/global-functions/use-Header-change.js"],"names":["React","useState","useEffect","useCallback","PropTypes","UseHeaderchange","newPath","newHeaderType","rest","window","console","log","newMemory","initialState","path","headerType","filters","setFilters","handleMemoryChange","addEventListener","removeEventListener","propTypes","string"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,SAASC,eAAT,CAAyBC,OAAzB,EAAkCC,aAAlC,EAAiD,GAAGC,IAApD,EAA0D;AAAA;;AACtD,MAAI,CAACC,MAAM,CAAC,WAAD,CAAX,EAA0B;AACtBA,IAAAA,MAAM,CAAC,WAAD,CAAN,GAAsB,EAAtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,MAAM,CAAC,WAAD,CAAhC;AACH;;AACD,QAAM;AAAEG,IAAAA;AAAF,MAAgBH,MAAtB;AAEA,QAAMI,YAAY,GAAG;AACjBC,IAAAA,IAAI,EAAE,EADW;AAEjBC,IAAAA,UAAU,EAAE,MAFK;AAGjB,OAAGP;AAHc,GAArB;AAKA,MAAI,CAACI,SAAS,CAACN,OAAD,CAAd,EAAyBM,SAAS,CAACN,OAAD,CAAT,GAAqBO,YAArB,CAZ6B,CAatD;;AACA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,EAAE,GAAGY;AAAL,GAAD,CAAtC;AAEA,MAAIK,kBAAkB,GAAGf,WAAW,CAAC,MAAM;AACvC,UAAM;AAAEW,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAuBC,OAA7B;;AACA,QAAI,CAACJ,SAAS,CAACN,OAAD,CAAd,EAAyB;AACrBW,MAAAA,UAAU,CAAC,EACP,GAAGD,OADI;AAEPF,QAAAA,IAAI,EAAER,OAFC;AAGPS,QAAAA,UAAU,EAAER,aAAa,IAAI;AAHtB,OAAD,CAAV;AAKH,KAND,MAMO;AACHG,MAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ,EAAuBI,OAAvB,EAAgC,OAAhC;AACA,aAAO,CAACA,OAAD,EAAUC,UAAV,CAAP;AACH;AACJ,GAZmC,EAYjC,CAACD,OAAD,CAZiC,CAApC;AAcAd,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,MAAM,CAACU,gBAAP,CAAwB,cAAxB,EAAwCD,kBAAxC;AACAT,IAAAA,MAAM,CAACW,mBAAP,CAA2B,cAA3B,EAA2CF,kBAA3C;AACH,GAHQ,EAGN,CAACF,OAAD,CAHM,CAAT;AAKA,SAAO,CAACA,OAAD,EAAUC,UAAV,CAAP;AACH;;GApCQZ,e;;KAAAA,e;AAsCTA,eAAe,CAACgB,SAAhB,GAA4B;AACxBf,EAAAA,OAAO,EAAEF,SAAS,CAACkB,MADK;AAExBP,EAAAA,UAAU,EAAEX,SAAS,CAACkB;AAFE,CAA5B;AAKA,eAAejB,eAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction UseHeaderchange(newPath, newHeaderType, ...rest) {\n    if (!window['newMemory']) {\n        window['newMemory'] = {};\n        console.log('new memory', window['newMemory']);\n    }\n    const { newMemory } = window;\n\n    const initialState = {\n        path: '',\n        headerType: 'home',\n        ...rest\n    };\n    if (!newMemory[newPath]) newMemory[newPath] = initialState;\n    // console.log(newMemory, initialState, 'state');\n    const [filters, setFilters] = useState({ ...initialState });\n\n    let handleMemoryChange = useCallback(() => {\n        const { path, headerType } = filters;\n        if (!newMemory[newPath]) {\n            setFilters({\n                ...filters,\n                path: newPath,\n                headerType: newHeaderType || 'home'\n            })\n        } else {\n            console.log(newMemory, filters, 'state');\n            return [filters, setFilters];\n        }\n    }, [filters])\n\n    useEffect(() => {\n        window.addEventListener('memoryChange', handleMemoryChange)\n        window.removeEventListener('memoryChange', handleMemoryChange)\n    }, [filters])\n\n    return [filters, setFilters];\n}\n\nUseHeaderchange.propTypes = {\n    newPath: PropTypes.string,\n    headerType: PropTypes.string\n}\n\nexport default UseHeaderchange;"]},"metadata":{},"sourceType":"module"}