{"ast":null,"code":"// import React, { useState, useEffect, useCallback } from 'react';\n// import PropTypes from 'prop-types';\n// function UseHeaderchange(newPath, newHeaderType, ...rest) {\n//     if (!window['newMemory']) {\n//         window['newMemory'] = {};\n//         console.log('new memory', window['newMemory']);\n//     }\n//     const { newMemory } = window;\n//     const initialState = {\n//         path: '',\n//         headerType: 'home',\n//         ...rest\n//     };\n//     if (!newMemory[newPath]) newMemory[newPath] = { path: newPath, headerType: newHeaderType || 'home', ...rest };\n//     // console.log(newMemory, initialState, 'state');\n//     // const [filters, setFilters] = useState({ ...initialState });\n//     // let handleMemoryChange = useCallback(() => {\n//     //     const { path, headerType } = filters;\n//     //     if (!newMemory[newPath]) {\n//     //         setFilters({\n//     //             ...filters,\n//     //             path: newPath,\n//     //             headerType: newHeaderType || 'home'\n//     //         })\n//     //         console.log('Hey hi');\n//     //     } else {\n//     //         console.log(newMemory, filters, 'state', '1');\n//     //         return newMemory[newPath];\n//     //     }\n//     // }, [filters])\n//     // useEffect(() => {\n//     //     window.addEventListener('memoryChange', handleMemoryChange)\n//     //     window.removeEventListener('memoryChange', handleMemoryChange)\n//     // }, [filters])\n//     console.log(newMemory, 'state', '2');\n//     return newMemory[newPath];\n// }\n// UseHeaderchange.propTypes = {\n//     newPath: PropTypes.string,\n//     headerType: PropTypes.string\n// }\n// export default UseHeaderchange;","map":{"version":3,"sources":["/home/hestabit/Music/moonick/src/utils/global-functions/use-Header-change.js"],"names":[],"mappings":"AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA","sourcesContent":["\n\n// import React, { useState, useEffect, useCallback } from 'react';\n// import PropTypes from 'prop-types';\n\n// function UseHeaderchange(newPath, newHeaderType, ...rest) {\n//     if (!window['newMemory']) {\n//         window['newMemory'] = {};\n//         console.log('new memory', window['newMemory']);\n//     }\n//     const { newMemory } = window;\n\n//     const initialState = {\n//         path: '',\n//         headerType: 'home',\n//         ...rest\n//     };\n//     if (!newMemory[newPath]) newMemory[newPath] = { path: newPath, headerType: newHeaderType || 'home', ...rest };\n//     // console.log(newMemory, initialState, 'state');\n//     // const [filters, setFilters] = useState({ ...initialState });\n\n//     // let handleMemoryChange = useCallback(() => {\n//     //     const { path, headerType } = filters;\n//     //     if (!newMemory[newPath]) {\n//     //         setFilters({\n//     //             ...filters,\n//     //             path: newPath,\n//     //             headerType: newHeaderType || 'home'\n//     //         })\n//     //         console.log('Hey hi');\n//     //     } else {\n//     //         console.log(newMemory, filters, 'state', '1');\n//     //         return newMemory[newPath];\n//     //     }\n//     // }, [filters])\n\n//     // useEffect(() => {\n//     //     window.addEventListener('memoryChange', handleMemoryChange)\n//     //     window.removeEventListener('memoryChange', handleMemoryChange)\n//     // }, [filters])\n//     console.log(newMemory, 'state', '2');\n//     return newMemory[newPath];\n// }\n\n// UseHeaderchange.propTypes = {\n//     newPath: PropTypes.string,\n//     headerType: PropTypes.string\n// }\n\n// export default UseHeaderchange;"]},"metadata":{},"sourceType":"module"}