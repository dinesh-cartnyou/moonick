{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction UseHeaderchange(newPath, newHeaderType, ...rest) {\n  _s();\n\n  if (!window['newMemory']) {\n    window['newMemory'] = {};\n    console.log('new memory', window['newMemory']);\n  }\n\n  const {\n    newMemory\n  } = window;\n  const [filters, setFilters] = useState({});\n  const initialState = {\n    path: '',\n    headerType: 'home',\n    ...rest\n  };\n  if (!newMemory[newPath]) newMemory[newPath] = initialState; // console.log(newMemory, initialState, 'state');\n  // let handleMemoryChange = useCallback(() => {\n  //     const { path, headerType } = filters;\n  //     if (!newMemory[newPath]) {\n  //         setFilters({\n  //             ...filters,\n  //             path: newPath,\n  //             headerType: newHeaderType || 'home'\n  //         })\n  //     } else {\n  //         console.log(newMemory, filters, 'state', '1');\n  //         return newMemory[newPath];\n  //     }\n  // }, [filters])\n  // useEffect(() => {\n  //     window.addEventListener('memoryChange', handleMemoryChange)\n  //     window.removeEventListener('memoryChange', handleMemoryChange)\n  // }, [filters])\n\n  console.log(newMemory, filters, 'state', '2');\n  return newMemory[newPath];\n}\n\n_s(UseHeaderchange, \"7ugFKl7W9CVdmEdnzcrVQ8QpwyU=\");\n\n_c = UseHeaderchange;\nUseHeaderchange.propTypes = {\n  newPath: PropTypes.string,\n  headerType: PropTypes.string\n};\nexport default UseHeaderchange;\n\nvar _c;\n\n$RefreshReg$(_c, \"UseHeaderchange\");","map":{"version":3,"sources":["/home/hestabit/Music/moonick/src/utils/global-functions/use-Header-change.js"],"names":["React","useState","useEffect","useCallback","PropTypes","UseHeaderchange","newPath","newHeaderType","rest","window","console","log","newMemory","filters","setFilters","initialState","path","headerType","propTypes","string"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,SAASC,eAAT,CAAyBC,OAAzB,EAAkCC,aAAlC,EAAiD,GAAGC,IAApD,EAA0D;AAAA;;AACtD,MAAI,CAACC,MAAM,CAAC,WAAD,CAAX,EAA0B;AACtBA,IAAAA,MAAM,CAAC,WAAD,CAAN,GAAsB,EAAtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,MAAM,CAAC,WAAD,CAAhC;AACH;;AACD,QAAM;AAAEG,IAAAA;AAAF,MAAgBH,MAAtB;AAEA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,EAAD,CAAtC;AAEA,QAAMc,YAAY,GAAG;AACjBC,IAAAA,IAAI,EAAE,EADW;AAEjBC,IAAAA,UAAU,EAAE,MAFK;AAGjB,OAAGT;AAHc,GAArB;AAMA,MAAI,CAACI,SAAS,CAACN,OAAD,CAAd,EAAyBM,SAAS,CAACN,OAAD,CAAT,GAAqBS,YAArB,CAf6B,CAgBtD;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ,EAAuBC,OAAvB,EAAgC,OAAhC,EAAyC,GAAzC;AACA,SAAOD,SAAS,CAACN,OAAD,CAAhB;AACH;;GAvCQD,e;;KAAAA,e;AAyCTA,eAAe,CAACa,SAAhB,GAA4B;AACxBZ,EAAAA,OAAO,EAAEF,SAAS,CAACe,MADK;AAExBF,EAAAA,UAAU,EAAEb,SAAS,CAACe;AAFE,CAA5B;AAKA,eAAed,eAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction UseHeaderchange(newPath, newHeaderType, ...rest) {\n    if (!window['newMemory']) {\n        window['newMemory'] = {};\n        console.log('new memory', window['newMemory']);\n    }\n    const { newMemory } = window;\n\n    const [filters, setFilters] = useState({ });\n\n    const initialState = {\n        path: '',\n        headerType: 'home',\n        ...rest\n    };\n\n    if (!newMemory[newPath]) newMemory[newPath] = initialState;\n    // console.log(newMemory, initialState, 'state');\n    \n\n    // let handleMemoryChange = useCallback(() => {\n    //     const { path, headerType } = filters;\n    //     if (!newMemory[newPath]) {\n    //         setFilters({\n    //             ...filters,\n    //             path: newPath,\n    //             headerType: newHeaderType || 'home'\n    //         })\n    //     } else {\n    //         console.log(newMemory, filters, 'state', '1');\n    //         return newMemory[newPath];\n    //     }\n    // }, [filters])\n\n    // useEffect(() => {\n    //     window.addEventListener('memoryChange', handleMemoryChange)\n    //     window.removeEventListener('memoryChange', handleMemoryChange)\n    // }, [filters])\n    console.log(newMemory, filters, 'state', '2');\n    return newMemory[newPath];\n}\n\nUseHeaderchange.propTypes = {\n    newPath: PropTypes.string,\n    headerType: PropTypes.string\n}\n\nexport default UseHeaderchange;"]},"metadata":{},"sourceType":"module"}